import spotipy
import time
from spotipy.oauth2 import SpotifyOAuth

from flask import Flask, request, url_for, session, redirect, render_template

app = Flask(__name__, template_folder="templates")

app.config['SESSION_COOKIE_NAME'] = 'SPOOKIE'
app.secret_key = 'kpsmfkasjfwt943i9jto29jtio29jti'


# Will later be set to the token once we acquire it
TOKEN_INFO = 'token_info'

# These are the CLIENT variables, they're not shown
# here intentionally for security purposes.
CLIENT_ID = "CLIENT-ID"
CLIENT_SECRET = "CLIENT-SECRET"


# --------------- APP ROUTES ---------------

# Home Route
@app.route('/')
def login():
    # This will get the value of the URL that we
    # want to transfer the user to, it's
    # pretty much the screen where Spotify asks
    # for your permission
    auth_url = create_spotify_oauth().get_authorize_url()

    # And here we actually send the user to that
    # URL that was generated by our function
    return redirect(auth_url)


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('spotifyMethod', _external=True))

# Redirect Route


@app.route('/redirect')
def redirect_page():
    # Clears any existing user data
    # check Flask documentation
    session.clear()

    # The AuthCode that was included in the request parameter
    # is extracted using the method below `request.args.get`
    # and stored in the `code` variable
    code = request.args.get('code')

    # Also discussed in the Spotipy oAuth2 Documentation
    token_info = create_spotify_oauth().get_access_token(code)

    # Using this, we can store the TOKEN_INFO in our Flask session
    session[TOKEN_INFO] = token_info
    return redirect(url_for('spotifyMethod', _external=True))


# Route for our method
@app.route('/spotifyMethod')
def spotifyMethod():

    try:
        token_info = get_token()
    except:
        print("User not logged in")
        return redirect('/')

    sp = spotipy.Spotify(auth=token_info['access_token'])
    results = sp.current_user_playing_track()

    cover_art = results["item"]["album"]["images"][0]["url"]
    artist_name = results['item']['artists'][0]['name']
    track_name = results['item']['name']

    # Code so that we get time in M:SS format
    seconds = results['progress_ms']//1000
    rem_sec = seconds % 60
    minutes = seconds//60
    time = f"{minutes}:{rem_sec:02}"

    return render_template("main.html", img_src=cover_art, artist=artist_name,
                           track=track_name, time=time)


def get_token():
    # If token doesn't exist, we get None
    token_info = session.get(TOKEN_INFO, None)

    # If such is the case, we do the following:
    if not token_info:
        redirect(url_for('login', external=False))

    current_time = int(time.time())
    is_expired = token_info['expires_at'] - current_time < 60

    if is_expired:
        spotify_oauth = create_spotify_oauth()
        token_info = spotify_oauth.refresh_access_token(
            token_info['refresh_token'])

    return token_info


def create_spotify_oauth():
    # Documentation for parameters necessary:
    # https://spotipy.readthedocs.io/en/2.22.1/?highlight=install#module-spotipy.oauth2
    # If you scroll down on the definiton, VSC shows the param
    return SpotifyOAuth(
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        redirect_uri=url_for('redirect_page', _external=True),
        # _external=True creates a direct path to the redirect

        # Link for the scopes and what they do:
        # https://developer.spotify.com/documentation/web-api/concepts/scopes
        scope="user-library-read user-top-read user-read-currently-playing"

    )


app.run(debug=True)
